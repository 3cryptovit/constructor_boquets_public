import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import useFavoritesStore from "../store/useFavoritesStore";
import formatImageUrl from "../utils/imageUrl";

function BouquetDetails() {
  const [bouquet, setBouquet] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const { id } = useParams();
  const navigate = useNavigate();
  const { addToFavorites, removeFromFavorites, isFavorite } = useFavoritesStore();

  useEffect(() => {
    fetch(`http://localhost:5000/api/bouquets/${id}`)
      .then(response => {
        if (!response.ok) {
          console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", response.status, response.statusText);
          // –ï—Å–ª–∏ 404, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
          if (response.status === 404) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É–∫–µ—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            setBouquet({
              id: parseInt(id),
              name: "–î–µ–º–æ-–±—É–∫–µ—Ç " + id,
              description: "–≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É–∫–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏. –ù–∞—Å—Ç–æ—è—â–∏–µ –±—É–∫–µ—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
              price: 3500 + (id * 100),
              image_url: `/assets/boquet_${(parseInt(id) % 4) + 1}.webp`,
              flowers: [
                { name: "–†–æ–∑–∞", color: "–∫—Ä–∞—Å–Ω—ã–π" },
                { name: "–ì–µ—Ä–±–µ—Ä–∞", color: "–æ—Ä–∞–Ω–∂–µ–≤—ã–π" },
                { name: "–õ–∏–ª–∏—è", color: "–±–µ–ª—ã–π" }
              ]
            });
            setLoading(false);
            return null; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–µ–ø–æ—á–∫—É –ø—Ä–æ–º–∏—Å–æ–≤
          }
          throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        }
        return response.json();
      })
      .then(data => {
        if (data) {
          console.log("–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –±—É–∫–µ—Ç–∞:", data);
          setBouquet(data);
        }
        setLoading(false);
      })
      .catch(error => {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—É–∫–µ—Ç–∞:", error);
        setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—É–∫–µ—Ç–µ");
        setLoading(false);
      });
  }, [id]);

  const handleAddToCart = () => {
    const token = localStorage.getItem("token");
    const userId = localStorage.getItem("userId");

    if (!token || !userId) {
      if (window.confirm("–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏. –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞?")) {
        navigate('/login');
      }
      return;
    }

    fetch("http://localhost:5000/api/cart", {
      method: "POST",
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({
        userId,
        bouquetId: id,
        quantity: 1
      })
    })
      .then(response => {
        if (!response.ok) {
          throw new Error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É');
        }
        return response.json();
      })
      .then(data => {
        alert("–ë—É–∫–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!");
      })
      .catch(error => {
        console.error("–û—à–∏–±–∫–∞:", error);
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –±—É–∫–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É");
      });
  };

  const handleToggleFavorite = () => {
    if (!bouquet) return;

    if (isFavorite(bouquet.id)) {
      removeFromFavorites(bouquet.id);
    } else {
      addToFavorites(bouquet);
    }
  };

  if (loading) {
    return (
      <div style={styles.container}>
        <div style={styles.loader}></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—É–∫–µ—Ç–µ...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div style={styles.container}>
        <h1 style={styles.title}>–û—à–∏–±–∫–∞</h1>
        <p style={styles.error}>{error}</p>
        <button
          style={styles.button}
          onClick={() => navigate('/catalog')}
        >
          –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥
        </button>
      </div>
    );
  }

  // –ï—Å–ª–∏ –±—É–∫–µ—Ç–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
  const displayBouquet = bouquet || {
    id: parseInt(id),
    name: "–ö—Ä–∞—Å–∏–≤—ã–π –±—É–∫–µ—Ç",
    description: "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
    price: 3500,
    image_url: "https://images.unsplash.com/photo-1584278773612-ba99fb465562?w=500&auto=format&fit=crop"
  };

  return (
    <div style={styles.container}>
      <button
        style={styles.backButton}
        onClick={() => navigate('/catalog')}
      >
        ‚Üê –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É
      </button>

      <div style={styles.content}>
        <div style={styles.imageContainer}>
          <img
            src={formatImageUrl(displayBouquet.image_url, "https://via.placeholder.com/500x500?text=Bouquet")}
            alt={displayBouquet.name}
            style={styles.image}
          />
        </div>

        <div style={styles.details}>
          <div style={styles.titleContainer}>
            <h1 style={styles.title}>{displayBouquet.name}</h1>
            <button
              style={styles.favoriteButton}
              onClick={handleToggleFavorite}
            >
              {isFavorite(parseInt(id)) ? "‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º" : "ü§ç –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"}
            </button>
          </div>
          <p style={styles.price}>{displayBouquet.price} ‚ÇΩ</p>
          <div style={styles.divider}></div>
          <p style={styles.description}>{displayBouquet.description || "–û–ø–∏—Å–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}</p>

          {displayBouquet.flowers && displayBouquet.flowers.length > 0 && (
            <div style={styles.flowersList}>
              <h3>–°–æ—Å—Ç–∞–≤ –±—É–∫–µ—Ç–∞:</h3>
              <ul>
                {displayBouquet.flowers.map((flower, index) => (
                  <li key={index}>{flower.name} - {flower.color}</li>
                ))}
              </ul>
            </div>
          )}

          <div style={styles.actions}>
            <button
              style={styles.addToCartButton}
              onClick={handleAddToCart}
            >
              –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
            </button>
            <button
              style={styles.constructorButton}
              onClick={() => navigate('/constructor')}
            >
              –°–æ–∑–¥–∞—Ç—å –ø–æ—Ö–æ–∂–∏–π –±—É–∫–µ—Ç
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

const styles = {
  container: {
    padding: "40px",
    maxWidth: "1200px",
    margin: "0 auto"
  },
  loader: {
    border: "6px solid #f3f3f3",
    borderTop: "6px solid #ff4081",
    borderRadius: "50%",
    width: "50px",
    height: "50px",
    animation: "spin 1s linear infinite",
    margin: "50px auto"
  },
  backButton: {
    background: "transparent",
    border: "none",
    color: "#333",
    fontSize: "1.1rem",
    cursor: "pointer",
    padding: "10px 0",
    marginBottom: "20px",
    display: "inline-block"
  },
  content: {
    display: "flex",
    flexDirection: "row",
    gap: "40px",
    flexWrap: "wrap"
  },
  imageContainer: {
    flex: "1 1 400px",
    minWidth: "300px"
  },
  image: {
    width: "100%",
    borderRadius: "8px",
    boxShadow: "0 4px 10px rgba(0,0,0,0.1)"
  },
  details: {
    flex: "1 1 400px",
    minWidth: "300px"
  },
  title: {
    fontSize: "2.5rem",
    color: "#333",
    marginTop: "0",
    marginBottom: "15px"
  },
  price: {
    fontSize: "1.8rem",
    color: "#ff4081",
    fontWeight: "bold",
    marginBottom: "20px"
  },
  divider: {
    height: "1px",
    background: "#eee",
    marginBottom: "20px"
  },
  description: {
    fontSize: "1.2rem",
    color: "#666",
    lineHeight: "1.6",
    marginBottom: "30px"
  },
  flowersList: {
    marginBottom: "30px"
  },
  actions: {
    display: "flex",
    gap: "15px",
    flexWrap: "wrap"
  },
  addToCartButton: {
    background: "#ff4081",
    color: "white",
    border: "none",
    padding: "15px 30px",
    borderRadius: "5px",
    cursor: "pointer",
    fontSize: "1.2rem",
    fontWeight: "bold",
    transition: "background 0.3s ease"
  },
  constructorButton: {
    background: "transparent",
    color: "#ff4081",
    border: "1px solid #ff4081",
    padding: "15px 30px",
    borderRadius: "5px",
    cursor: "pointer",
    fontSize: "1.2rem",
    fontWeight: "bold",
    transition: "all 0.3s ease"
  },
  error: {
    color: "#f44336",
    fontSize: "1.2rem",
    marginBottom: "20px"
  },
  button: {
    background: "#ff4081",
    color: "white",
    border: "none",
    padding: "10px 20px",
    borderRadius: "5px",
    cursor: "pointer",
    fontSize: "1.1rem"
  },
  titleContainer: {
    display: "flex",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: "15px"
  },
  favoriteButton: {
    display: "flex",
    alignItems: "center",
    background: "transparent",
    color: "#ff4081",
    border: "1px solid #ff4081",
    padding: "8px 15px",
    borderRadius: "5px",
    cursor: "pointer",
    fontSize: "1rem",
    transition: "all 0.3s ease"
  }
};

export default BouquetDetails; 