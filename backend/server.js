import express from "express";
import cors from "cors";
import pg from "pg";
import dotenv from "dotenv";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";
import { getAllFlowers, createBouquet, addFlowerToBouquet, getBouquetComposition, getUserCart, addToCart, removeFromCart, createOrder, getUserOrders, addFlower, updateFlower, deleteFlower } from "./database/queries.js";
import multer from "multer";
import fs from "fs";
import path from "path";
import authRoutes from "./routes/auth.js";

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!fs.existsSync('./uploads')) {
  fs.mkdirSync('./uploads', { recursive: true });
}

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, './uploads/');
  },
  filename: function (req, file, cb) {
    cb(null, Date.now() + '-' + file.originalname);
  }
});
const upload = multer({
  storage: storage,
  limits: { fileSize: 5 * 1024 * 1024 } // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 5MB
});

dotenv.config();

const app = express();
const port = process.env.PORT || 5000;
const JWT_SECRET = process.env.JWT_SECRET || "your-secret-key"; // –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è JWT

const pool = new pg.Pool({
  user: process.env.DB_USER || "postgres",
  host: process.env.DB_HOST || "localhost",
  database: process.env.DB_NAME || "bouquet_DB",
  password: process.env.DB_PASSWORD || "", // üìå –ë–µ—Ä—ë–º –ø–∞—Ä–æ–ª—å –∏–∑ .env
  port: process.env.DB_PORT || 5432,
});

app.use(cors({
  origin: "http://localhost:3000", // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å —Ñ—Ä–æ–Ω—Ç–∞
  methods: "GET,POST,PUT,DELETE",
  credentials: true,
}));
app.use(express.json());

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
app.use("/api/auth", authRoutes);

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT-—Ç–æ–∫–µ–Ω–∞
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN

  if (!token) {
    return res.status(401).json({ error: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" });
  }

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) {
      return res.status(403).json({ error: "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω" });
    }
    req.user = user;
    next();
  });
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const isAdmin = (req, res, next) => {
  if (req.user && req.user.role === 'admin') {
    next();
  } else {
    return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞." });
  }
};

// –§—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const safeLog = (message, data) => {
  if (process.env.NODE_ENV !== "production") {
    if (data) {
      console.log(message, data);
    } else {
      console.log(message);
    }
  }
};

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
const logError = (message, error) => {
  // –û—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º –≤—Å–µ–≥–¥–∞, –Ω–æ –≤ production —É–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª–∏
  if (process.env.NODE_ENV === "production") {
    console.error(message);
  } else {
    console.error(message, error);
  }
};

// üìå –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–µ—Ä–≤–µ—Ä–∞
app.get("/", (req, res) => {
  res.send("Boquet Shop Backend —Ä–∞–±–æ—Ç–∞–µ—Ç!");
});

// üìå API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –±—É–∫–µ—Ç–æ–≤
app.get("/api/bouquets", async (req, res) => {
  try {
    const bouquets = await pool.query("SELECT * FROM bouquets");

    for (let bouquet of bouquets.rows) {
      try {
        const flowers = await pool.query(
          `SELECT bf.quantity, f.name, f.color, f.image_url 
           FROM bouquet_flowers bf
           JOIN flowers f ON bf.flower_id = f.id
           WHERE bf.bouquet_id = $1`,
          [bouquet.id]
        );
        bouquet.flowers = flowers.rows;
      } catch (flowerError) {
        logError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –±—É–∫–µ—Ç–∞:", flowerError);
        bouquet.flowers = []; // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      if (!bouquet.image_url) {
        bouquet.image_url = `/assets/boquet_${bouquet.id}.webp`;
      }
    }

    res.json(bouquets.rows);
  } catch (error) {
    logError("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—É–∫–µ—Ç–æ–≤:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// üìå API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±—É–∫–µ—Ç–∞ –ø–æ ID
app.get("/api/bouquets/:id", async (req, res) => {
  const { id } = req.params;

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—É–∫–µ—Ç–µ
    const bouquetResult = await pool.query(
      "SELECT * FROM bouquets WHERE id = $1",
      [id]
    );

    if (bouquetResult.rows.length === 0) {
      return res.status(404).json({ error: "–ë—É–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const bouquet = bouquetResult.rows[0];

    // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç—ã –±—É–∫–µ—Ç–∞
    try {
      const flowers = await pool.query(
        `SELECT bf.quantity, f.name, f.color, f.image_url 
         FROM bouquet_flowers bf
         JOIN flowers f ON bf.flower_id = f.id
         WHERE bf.bouquet_id = $1`,
        [id]
      );

      bouquet.flowers = flowers.rows;
    } catch (flowerError) {
      logError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –±—É–∫–µ—Ç–∞:", flowerError);
      bouquet.flowers = []; // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!bouquet.image_url) {
      bouquet.image_url = `/assets/boquet_${bouquet.id}.webp`;
    }

    res.json(bouquet);
  } catch (error) {
    logError("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—É–∫–µ—Ç–∞:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// üìå API –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
app.post("/order", async (req, res) => {
  const { userId } = req.body;

  try {
    const orderResult = await pool.query(
      "INSERT INTO orders (user_id) VALUES ($1) RETURNING id",
      [userId]
    );
    const orderId = orderResult.rows[0].id;

    const cartItems = await pool.query(
      "SELECT bouquet_id, quantity FROM cart WHERE user_id = $1",
      [userId]
    );

    for (const item of cartItems.rows) {
      await pool.query(
        "INSERT INTO order_items (order_id, bouquet_id, quantity) VALUES ($1, $2, $3)",
        [orderId, item.bouquet_id, item.quantity]
      );
    }

    await pool.query("DELETE FROM cart WHERE user_id = $1", [userId]);

    res.status(201).json({ message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω", orderId });
  } catch (error) {
    logError("–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤
app.get('/api/flowers', async (req, res) => {
  try {
    const flowers = await getAllFlowers();

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    for (let flower of flowers) {
      if (!flower.image_url) {
        flower.image_url = `/assets/flowers/${flower.name.toLowerCase()}.png`;
      }
    }

    res.json(flowers);
  } catch (error) {
    logError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–≤–µ—Ç–æ–≤:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±—É–∫–µ—Ç
app.post("/api/bouquets", authenticateToken, async (req, res) => {
  const { userId, name, description, price, image_url, circle_count, flower_count } = req.body;

  if (!userId || !name) {
    return res.status(400).json({ error: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç –±—É–∫–µ—Ç –ø–æ–¥ —Å–≤–æ–∏–º ID
    if (parseInt(userId) !== req.user.userId) {
      return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" });
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±—É–∫–µ—Ç
    const newBouquet = await createBouquet(
      userId,
      name,
      description || "–ö—Ä–∞—Å–∏–≤—ã–π –±—É–∫–µ—Ç —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã",
      circle_count || 0,
      flower_count || 0,
      image_url || "/assets/default_bouquet.webp"
    );

    // –°—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –±—É–∫–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await addToCart(userId, newBouquet.id, 1);

    res.json({
      message: "–ë—É–∫–µ—Ç —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!",
      bouquet: newBouquet
    });
  } catch (error) {
    logError("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—É–∫–µ—Ç–∞:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—É–∫–µ—Ç–∞" });
  }
});

// –î–æ–±–∞–≤–∏—Ç—å —Ü–≤–µ—Ç–æ–∫ –≤ –±—É–∫–µ—Ç
app.post("/api/bouquets/:bouquetId/flowers", authenticateToken, async (req, res) => {
  try {
    const { bouquetId } = req.params;
    const { flowerId, positionX, positionY, color, quantity } = req.body;

    if (!flowerId || positionX === undefined || positionY === undefined || !color) {
      return res.status(400).json({ error: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç —Ü–≤–µ—Ç–æ–∫ –≤ —Å–≤–æ–π –±—É–∫–µ—Ç
    const bouquet = await pool.query("SELECT user_id FROM bouquets WHERE id = $1", [bouquetId]);

    if (bouquet.rows.length === 0) {
      return res.status(404).json({ error: "–ë—É–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    if (bouquet.rows[0].user_id !== req.user.userId) {
      return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ü–≤–µ—Ç–æ–∫ –≤ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
    const existingFlower = await pool.query(
      `SELECT * FROM bouquet_flowers 
       WHERE bouquet_id = $1 AND position_x = $2 AND position_y = $3`,
      [bouquetId, positionX, positionY]
    );

    if (existingFlower.rows.length > 0) {
      return res.status(409).json({ error: "–í —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ —É–∂–µ –µ—Å—Ç—å —Ü–≤–µ—Ç–æ–∫" });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–∫ –≤ –±—É–∫–µ—Ç
    const newFlower = await addFlowerToBouquet(
      bouquetId,
      flowerId,
      positionX,
      positionY,
      color,
      quantity || 1
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤ –≤ –±—É–∫–µ—Ç–µ
    await pool.query(
      `UPDATE bouquets SET flower_count = flower_count + 1 WHERE id = $1`,
      [bouquetId]
    );

    res.json({
      message: "–¶–≤–µ—Ç–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±—É–∫–µ—Ç",
      flower: newFlower
    });
  } catch (error) {
    logError("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∫–∞ –≤ –±—É–∫–µ—Ç:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–≤–µ—Ç–∫–∞" });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–∞–≤ –±—É–∫–µ—Ç–∞
app.get('/api/bouquets/:bouquetId/flowers', async (req, res) => {
  try {
    const { bouquetId } = req.params;
    const composition = await getBouquetComposition(bouquetId);
    res.json(composition);
  } catch (error) {
    logError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–∞–≤–∞ –±—É–∫–µ—Ç–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∫–∞ –∏–∑ –±—É–∫–µ—Ç–∞
app.delete("/api/bouquets/:bouquetId/flowers/:flowerId", async (req, res) => {
  try {
    const { bouquetId, flowerId } = req.params;

    await pool.query(
      "DELETE FROM bouquet_flowers WHERE bouquet_id = $1 AND flower_id = $2",
      [bouquetId, flowerId]
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤ –≤ –±—É–∫–µ—Ç–µ
    await pool.query(
      `UPDATE bouquets SET flower_count = (
        SELECT COUNT(*) FROM bouquet_flowers WHERE bouquet_id = $1
      ) WHERE id = $1`,
      [bouquetId]
    );

    res.json({ message: "–¶–≤–µ—Ç–æ–∫ —É–¥–∞–ª—ë–Ω!" });
  } catch (error) {
    logError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ü–≤–µ—Ç–∫–∞:", error);
    res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post("/api/register", async (req, res) => {
  const { username, password, role } = req.body;
  if (!username || !password) {
    return res.status(400).json({ error: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const userExists = await pool.query("SELECT * FROM users WHERE username = $1", [username]);
    if (userExists.rows.length > 0) {
      return res.status(400).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
    }

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash(password, 10);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å 'user' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Ä–æ–ª—å 'admin' –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    const userRole = role === 'admin' ? 'user' : (role || 'user');

    const newUser = await pool.query(
      "INSERT INTO users (username, password, role) VALUES ($1, $2, $3) RETURNING id, username, role",
      [username, hashedPassword, userRole]
    );

    res.status(201).json({ message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!", user: newUser.rows[0] });
  } catch (error) {
    logError("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post("/api/login", async (req, res) => {
  const { username, password } = req.body;
  if (!username || !password) {
    return res.status(400).json({ error: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
  }

  try {
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const user = await pool.query("SELECT * FROM users WHERE username = $1", [username]);
    if (user.rows.length === 0) {
      return res.status(401).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isPasswordValid = await bcrypt.compare(password, user.rows[0].password);
    if (!isPasswordValid) {
      return res.status(401).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
    }

    // –°–æ–∑–¥–∞–µ–º JWT-—Ç–æ–∫–µ–Ω —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const token = jwt.sign(
      {
        userId: user.rows[0].id,
        username: user.rows[0].username,
        role: user.rows[0].role || 'user' // –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –≤ —Ç–æ–∫–µ–Ω
      },
      JWT_SECRET,
      { expiresIn: '24h' }
    );

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–∫–µ–Ω
    res.json({
      userId: user.rows[0].id,
      username: user.rows[0].username,
      role: user.rows[0].role || 'user', // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–æ–ª—å –∫–ª–∏–µ–Ω—Ç—É
      token: token
    });
  } catch (error) {
    logError("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get("/api/cart", authenticateToken, async (req, res) => {
  try {
    const userId = req.user.userId;
    const cartItems = await getUserCart(userId);

    res.json(cartItems);
  } catch (error) {
    logError("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã" });
  }
});

// –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
app.post("/api/cart", authenticateToken, async (req, res) => {
  try {
    const { bouquetId, quantity } = req.body;
    const userId = req.user.userId;

    if (!bouquetId || !quantity) {
      return res.status(400).json({ error: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    const cartItem = await addToCart(userId, bouquetId, quantity);

    res.json({
      message: "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É",
      item: cartItem
    });
  } catch (error) {
    logError("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É" });
  }
});

// –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
app.delete("/api/cart/:bouquetId", authenticateToken, async (req, res) => {
  try {
    const { bouquetId } = req.params;
    const userId = req.user.userId;

    const removedItem = await removeFromCart(userId, bouquetId);

    if (!removedItem) {
      return res.status(404).json({ error: "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ" });
    }

    res.json({
      message: "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã",
      item: removedItem
    });
  } catch (error) {
    logError("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã" });
  }
});

// –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ ID –∑–∞–ø–∏—Å–∏ (–¥–ª—è –±–æ–ª–µ–µ –≥–∏–±–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è)
app.delete("/api/cart/item/:id", authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    const userId = req.user.userId;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const cartItemCheck = await pool.query(
      "SELECT * FROM cart WHERE id = $1 AND user_id = $2",
      [id, userId]
    );

    if (cartItemCheck.rows.length === 0) {
      return res.status(404).json({ error: "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ" });
    }

    // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã
    const result = await pool.query(
      "DELETE FROM cart WHERE id = $1 RETURNING *",
      [id]
    );

    res.json({
      message: "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã",
      item: result.rows[0]
    });
  } catch (error) {
    logError("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã" });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
app.put("/api/cart/item/:id", authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    const { quantity } = req.body;
    const userId = req.user.userId;

    if (!quantity || quantity < 1) {
      return res.status(400).json({ error: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const cartItemCheck = await pool.query(
      "SELECT * FROM cart WHERE id = $1 AND user_id = $2",
      [id, userId]
    );

    if (cartItemCheck.rows.length === 0) {
      return res.status(404).json({ error: "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ" });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    const result = await pool.query(
      "UPDATE cart SET quantity = $1 WHERE id = $2 RETURNING *",
      [quantity, id]
    );

    res.json({
      message: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
      item: result.rows[0]
    });
  } catch (error) {
    logError("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞" });
  }
});

// API –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –∫–æ—Ä–∑–∏–Ω—É
app.post("/api/orders", authenticateToken, async (req, res) => {
  const client = await pool.connect();

  try {
    safeLog("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:", req.body);
    safeLog("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ —Ç–æ–∫–µ–Ω–∞:", req.user);
    const { items } = req.body;
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º userId –∏–∑ —Ç–æ–∫–µ–Ω–∞
    const userId = req.user.userId;

    safeLog(`–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è userId –∏–∑ —Ç–æ–∫–µ–Ω–∞: ${userId}`);

    if (!userId) {
      logError("userId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–æ–∫–µ–Ω–µ!");
      return res.status(403).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∑–∞–∫–∞–∑–µ
    if (!items || items.length === 0) {
      return res.status(400).json({ error: "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞" });
    }

    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await client.query("BEGIN");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ created_at –≤ —Ç–∞–±–ª–∏—Ü–µ orders
    const checkColumn = await client.query(`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name='orders' AND column_name='created_at'
    `);

    let orderResult;
    if (checkColumn.rows.length > 0) {
      // –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ
      orderResult = await client.query(
        `INSERT INTO orders (user_id, status, created_at) 
         VALUES ($1, 'pending', NOW()) RETURNING id`,
        [userId]
      );
    } else {
      // –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ—Ç, –≤—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –Ω–µ–µ
      orderResult = await client.query(
        `INSERT INTO orders (user_id, status) 
         VALUES ($1, 'pending') RETURNING id`,
        [userId]
      );
    }

    const orderId = orderResult.rows[0].id;
    let totalPrice = 0;

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑
    for (const item of items) {
      // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –∫–∞—Å—Ç–æ–º–Ω—ã–π, —Å–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –ë–î
      let bouquetId = item.id;

      if (item.isCustom) {
        safeLog("–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –±—É–∫–µ—Ç:", item);
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±—É–∫–µ—Ç –≤ –ë–î
        const newBouquet = await client.query(
          `INSERT INTO bouquets (name, description, price, image_url, user_id, created_at, flower_count) 
           VALUES ($1, $2, $3, $4, $5, NOW(), $6) RETURNING id`,
          [
            item.name || "–ö–∞—Å—Ç–æ–º–Ω—ã–π –±—É–∫–µ—Ç",
            item.description || "–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
            item.price || 0,
            item.image_url || null,
            userId,
            item.flowerCount || 0
          ]
        );

        bouquetId = newBouquet.rows[0].id;

        // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–≤–µ—Ç–∞—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
        if (item.flowers && Array.isArray(item.flowers)) {
          for (const flower of item.flowers) {
            if (flower && flower.id) {
              await client.query(
                `INSERT INTO bouquet_flowers (bouquet_id, flower_id, quantity, position_x, position_y) 
                 VALUES ($1, $2, $3, $4, $5)`,
                [
                  bouquetId,
                  flower.id,
                  flower.quantity || 1,
                  flower.positionX || 0,
                  flower.positionY || 0
                ]
              );
            }
          }
        }
      }

      const itemPrice = parseFloat(item.price);
      const itemQuantity = parseInt(item.quantity);
      const itemTotal = itemPrice * itemQuantity;
      totalPrice += itemTotal;

      await client.query(
        `INSERT INTO order_items (order_id, bouquet_id, quantity, price) 
         VALUES ($1, $2, $3, $4)`,
        [orderId, bouquetId, itemQuantity, itemPrice]
      );
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞
    await client.query(
      "UPDATE orders SET total_price = $1 WHERE id = $2",
      [totalPrice, orderId]
    );

    // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await client.query("DELETE FROM cart WHERE user_id = $1", [userId]);

    // –§–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await client.query("COMMIT");

    res.status(201).json({
      message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω",
      orderId,
      totalPrice
    });
  } catch (error) {
    // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    await client.query("ROLLBACK");
    logError("–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞" });
  } finally {
    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    client.release();
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get("/api/orders", authenticateToken, async (req, res) => {
  try {
    const userId = req.user.userId;
    const orders = await getUserOrders(userId);

    res.json(orders);
  } catch (error) {
    logError("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤" });
  }
});

// API –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.post("/api/users/:userId/make-admin", authenticateToken, isAdmin, async (req, res) => {
  const { userId } = req.params;

  try {
    const user = await pool.query("SELECT * FROM users WHERE id = $1", [userId]);
    if (user.rows.length === 0) {
      return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    await pool.query("UPDATE users SET role = 'admin' WHERE id = $1", [userId]);

    res.json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º" });
  } catch (error) {
    logError("–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±—É–∫–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.delete("/api/bouquets/:id", authenticateToken, isAdmin, async (req, res) => {
  const { id } = req.params;

  try {
    // –£–¥–∞–ª—è–µ–º —Ü–≤–µ—Ç—ã –∏–∑ –±—É–∫–µ—Ç–∞
    await pool.query(
      "DELETE FROM bouquet_flowers WHERE bouquet_id = $1",
      [id]
    );

    // –£–¥–∞–ª—è–µ–º –±—É–∫–µ—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await pool.query(
      "DELETE FROM cart WHERE bouquet_id = $1",
      [id]
    );

    // –£–¥–∞–ª—è–µ–º –±—É–∫–µ—Ç
    const result = await pool.query(
      "DELETE FROM bouquets WHERE id = $1 RETURNING *",
      [id]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: "–ë—É–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    res.json({ message: "–ë—É–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", deletedBouquet: result.rows[0] });
  } catch (error) {
    logError("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±—É–∫–µ—Ç–∞:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.get("/api/users", authenticateToken, isAdmin, async (req, res) => {
  try {
    const users = await pool.query(
      "SELECT id, username, role, created_at FROM users ORDER BY id"
    );
    res.json(users.rows);
  } catch (error) {
    logError("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
}); // ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ–º app.get

// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ü–≤–µ—Ç–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.post('/api/flowers', authenticateToken, isAdmin, async (req, res) => {
  try {
    const { name, color, price, popularity, image_url } = req.body;

    if (!name || !color || !price) {
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–≤–µ—Ç –∏ —Ü–µ–Ω—É —Ü–≤–µ—Ç–∫–∞' });
    }

    const newFlower = await addFlower(name, color, price, popularity || 0, image_url);

    res.status(201).json({
      message: "–¶–≤–µ—Ç–æ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω",
      flower: newFlower
    });
  } catch (error) {
    logError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–≤–µ—Ç–∫–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.put('/api/flowers/:id', authenticateToken, isAdmin, async (req, res) => {
  try {
    const { id } = req.params;
    const { name, color, price, popularity, image_url } = req.body;

    if (!name || !color || !price) {
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–≤–µ—Ç –∏ —Ü–µ–Ω—É —Ü–≤–µ—Ç–∫–∞' });
    }

    const updatedFlower = await updateFlower(id, name, color, price, popularity || 0, image_url);

    if (!updatedFlower) {
      return res.status(404).json({ error: '–¶–≤–µ—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    res.json({
      message: "–¶–≤–µ—Ç–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
      flower: updatedFlower
    });
  } catch (error) {
    logError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–≤–µ—Ç–∫–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –£–¥–∞–ª–∏—Ç—å —Ü–≤–µ—Ç–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.delete('/api/flowers/:id', authenticateToken, isAdmin, async (req, res) => {
  try {
    const { id } = req.params;

    const deletedFlower = await deleteFlower(id);

    if (!deletedFlower) {
      return res.status(404).json({ error: '–¶–≤–µ—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    res.json({
      message: "–¶–≤–µ—Ç–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
      flower: deletedFlower
    });
  } catch (error) {
    logError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ü–≤–µ—Ç–∫–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –∞–¥–º–∏–Ω–∞
import adminRoutes from "./routes/admin.js";

// –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –∞–¥–º–∏–Ω–∞
app.use("/api/admin", adminRoutes);

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
app.use("/uploads", express.static("uploads"));

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
app.listen(port, () => {
  safeLog('\n============================');
  safeLog(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  safeLog(`üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞: ${process.cwd()}`);
  safeLog(`üåê API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${port}`);
  safeLog(`üìä ENV: ${process.env.NODE_ENV || 'development'}`);
  safeLog('============================\n');
});

