import express from "express";
import cors from "cors";
import pg from "pg";
import dotenv from "dotenv";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";
import { getAllFlowers, createBouquet, addFlowerToBouquet, getBouquetComposition } from "./database/queries.js";

dotenv.config();

const app = express();
const port = process.env.PORT || 5000;
const JWT_SECRET = process.env.JWT_SECRET || "your-secret-key"; // –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è JWT

const pool = new pg.Pool({
  user: process.env.DB_USER || "postgres",
  host: process.env.DB_HOST || "localhost",
  database: process.env.DB_NAME || "bouquet_db",
  password: process.env.DB_PASSWORD || "", // üìå –ë–µ—Ä—ë–º –ø–∞—Ä–æ–ª—å –∏–∑ .env
  port: process.env.DB_PORT || 5432,
});

app.use(cors({
  origin: "http://localhost:3000", // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å —Ñ—Ä–æ–Ω—Ç–∞
  methods: "GET,POST,PUT,DELETE",
  credentials: true,
}));
app.use(express.json());

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT-—Ç–æ–∫–µ–Ω–∞
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN

  if (!token) {
    return res.status(401).json({ error: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" });
  }

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) {
      return res.status(403).json({ error: "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω" });
    }
    req.user = user;
    next();
  });
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const isAdmin = (req, res, next) => {
  if (req.user && req.user.role === 'admin') {
    next();
  } else {
    return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞." });
  }
};

// üìå –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–µ—Ä–≤–µ—Ä–∞
app.get("/", (req, res) => {
  res.send("Boquet Shop Backend —Ä–∞–±–æ—Ç–∞–µ—Ç!");
});

// üìå API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –±—É–∫–µ—Ç–æ–≤
app.get("/api/bouquets", async (req, res) => {
  try {
    const bouquets = await pool.query("SELECT * FROM bouquets");

    for (let bouquet of bouquets.rows) {
      const flowers = await pool.query(
        `SELECT bf.position_x, bf.position_y, bf.quantity, f.name, f.color, f.image_url 
         FROM bouquet_flowers bf
         JOIN flowers f ON bf.flower_id = f.id
         WHERE bf.bouquet_id = $1`,
        [bouquet.id]
      );
      bouquet.flowers = flowers.rows;

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      if (!bouquet.image_url) {
        bouquet.image_url = `/assets/boquet_${bouquet.id}.webp`;
      }
    }

    res.json(bouquets.rows);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—É–∫–µ—Ç–æ–≤:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// üìå API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±—É–∫–µ—Ç–∞ –ø–æ ID
app.get("/api/bouquets/:id", async (req, res) => {
  const { id } = req.params;

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—É–∫–µ—Ç–µ
    const bouquetResult = await pool.query(
      "SELECT * FROM bouquets WHERE id = $1",
      [id]
    );

    if (bouquetResult.rows.length === 0) {
      return res.status(404).json({ error: "–ë—É–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const bouquet = bouquetResult.rows[0];

    // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç—ã –±—É–∫–µ—Ç–∞
    const flowers = await pool.query(
      `SELECT bf.position_x, bf.position_y, bf.quantity, f.name, f.color, f.image_url 
       FROM bouquet_flowers bf
       JOIN flowers f ON bf.flower_id = f.id
       WHERE bf.bouquet_id = $1`,
      [id]
    );

    bouquet.flowers = flowers.rows;

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!bouquet.image_url) {
      bouquet.image_url = `/assets/boquet_${bouquet.id}.webp`;
    }

    res.json(bouquet);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—É–∫–µ—Ç–∞:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// üìå API –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
app.post("/order", async (req, res) => {
  const { userId } = req.body;

  try {
    const orderResult = await pool.query(
      "INSERT INTO orders (user_id) VALUES ($1) RETURNING id",
      [userId]
    );
    const orderId = orderResult.rows[0].id;

    const cartItems = await pool.query(
      "SELECT bouquet_id, quantity FROM cart WHERE user_id = $1",
      [userId]
    );

    for (const item of cartItems.rows) {
      await pool.query(
        "INSERT INTO order_items (order_id, bouquet_id, quantity) VALUES ($1, $2, $3)",
        [orderId, item.bouquet_id, item.quantity]
      );
    }

    await pool.query("DELETE FROM cart WHERE user_id = $1", [userId]);

    res.status(201).json({ message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω", orderId });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤
app.get('/api/flowers', async (req, res) => {
  try {
    const flowers = await getAllFlowers();
    res.json(flowers);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–≤–µ—Ç–æ–≤:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±—É–∫–µ—Ç
app.post("/api/bouquets", async (req, res) => {
  const { userId, name } = req.body;

  if (!userId || !name) {
    return res.status(400).json({ error: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
  }

  try {
    const newBouquet = await pool.query(
      "INSERT INTO bouquets (user_id, name, circle_count, flower_count) VALUES ($1, $2, 0, 0) RETURNING *",
      [userId, name]
    );
    res.json(newBouquet.rows[0]);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—É–∫–µ—Ç–∞:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—É–∫–µ—Ç–∞" });
  }
});

// –î–æ–±–∞–≤–∏—Ç—å —Ü–≤–µ—Ç–æ–∫ –≤ –±—É–∫–µ—Ç
app.post("/api/bouquets/:bouquetId/flowers", async (req, res) => {
  try {
    const { bouquetId } = req.params;
    const { flowerId, positionX, positionY, color } = req.body;

    if (!flowerId || positionX === undefined || positionY === undefined || !color) {
      return res.status(400).json({ error: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–∫ –≤ –±—É–∫–µ—Ç
    await pool.query(
      `INSERT INTO bouquet_flowers (bouquet_id, flower_id, position_x, position_y, color) 
       VALUES ($1, $2, $3, $4, $5)`,
      [bouquetId, flowerId, positionX, positionY, color]
    );

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤ –≤ –±—É–∫–µ—Ç–µ
    await pool.query(
      `UPDATE bouquets SET flower_count = (
        SELECT COUNT(*) FROM bouquet_flowers WHERE bouquet_id = $1
      ) WHERE id = $1`,
      [bouquetId]
    );

    res.json({ message: "–¶–≤–µ—Ç–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–≤–µ—Ç–∫–∞:", error);
    res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–∞–≤ –±—É–∫–µ—Ç–∞
app.get('/api/bouquets/:bouquetId/flowers', async (req, res) => {
  try {
    const { bouquetId } = req.params;
    const composition = await getBouquetComposition(bouquetId);
    res.json(composition);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–∞–≤–∞ –±—É–∫–µ—Ç–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∫–∞ –∏–∑ –±—É–∫–µ—Ç–∞
app.delete("/api/bouquets/:bouquetId/flowers/:flowerId", async (req, res) => {
  try {
    const { bouquetId, flowerId } = req.params;

    await pool.query(
      "DELETE FROM bouquet_flowers WHERE bouquet_id = $1 AND flower_id = $2",
      [bouquetId, flowerId]
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤ –≤ –±—É–∫–µ—Ç–µ
    await pool.query(
      `UPDATE bouquets SET flower_count = (
        SELECT COUNT(*) FROM bouquet_flowers WHERE bouquet_id = $1
      ) WHERE id = $1`,
      [bouquetId]
    );

    res.json({ message: "–¶–≤–µ—Ç–æ–∫ —É–¥–∞–ª—ë–Ω!" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ü–≤–µ—Ç–∫–∞:", error);
    res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post("/api/register", async (req, res) => {
  const { username, password, role } = req.body;
  if (!username || !password) {
    return res.status(400).json({ error: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const userExists = await pool.query("SELECT * FROM users WHERE username = $1", [username]);
    if (userExists.rows.length > 0) {
      return res.status(400).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
    }

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash(password, 10);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å 'user' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Ä–æ–ª—å 'admin' –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    const userRole = role === 'admin' ? 'user' : (role || 'user');

    const newUser = await pool.query(
      "INSERT INTO users (username, password, role) VALUES ($1, $2, $3) RETURNING id, username, role",
      [username, hashedPassword, userRole]
    );

    res.status(201).json({ message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!", user: newUser.rows[0] });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post("/api/login", async (req, res) => {
  const { username, password } = req.body;
  if (!username || !password) {
    return res.status(400).json({ error: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
  }

  try {
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const user = await pool.query("SELECT * FROM users WHERE username = $1", [username]);
    if (user.rows.length === 0) {
      return res.status(401).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isPasswordValid = await bcrypt.compare(password, user.rows[0].password);
    if (!isPasswordValid) {
      return res.status(401).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
    }

    // –°–æ–∑–¥–∞–µ–º JWT-—Ç–æ–∫–µ–Ω —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const token = jwt.sign(
      {
        userId: user.rows[0].id,
        username: user.rows[0].username,
        role: user.rows[0].role || 'user' // –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –≤ —Ç–æ–∫–µ–Ω
      },
      JWT_SECRET,
      { expiresIn: '24h' }
    );

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–∫–µ–Ω
    res.json({
      userId: user.rows[0].id,
      username: user.rows[0].username,
      role: user.rows[0].role || 'user', // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–æ–ª—å –∫–ª–∏–µ–Ω—Ç—É
      token: token
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get("/api/cart/:userId", authenticateToken, async (req, res) => {
  const { userId } = req.params;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–≤–æ—é –∫–æ—Ä–∑–∏–Ω—É
  if (parseInt(userId) !== req.user.userId) {
    return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" });
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±—É–∫–µ—Ç–∞—Ö
    const cartItems = await pool.query(
      `SELECT c.id, c.bouquet_id, c.quantity, b.name, b.price, b.image_url, b.description
       FROM cart c
       JOIN bouquets b ON c.bouquet_id = b.id
       WHERE c.user_id = $1`,
      [userId]
    );

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    for (let item of cartItems.rows) {
      if (!item.image_url) {
        item.image_url = `/assets/boquet_${item.bouquet_id}.webp`;
      }
    }

    res.json(cartItems.rows);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –î–æ–±–∞–≤–∏—Ç—å –±—É–∫–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É
app.post("/api/cart", authenticateToken, async (req, res) => {
  const { userId, bouquetId, quantity } = req.body;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ —Å–≤–æ—é –∫–æ—Ä–∑–∏–Ω—É
  if (parseInt(userId) !== req.user.userId) {
    return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" });
  }

  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±—É–∫–µ—Ç
    const bouquetCheck = await pool.query("SELECT id FROM bouquets WHERE id = $1", [bouquetId]);

    if (bouquetCheck.rows.length === 0) {
      return res.status(404).json({ error: "–ë—É–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –±—É–∫–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ
    const existingItem = await pool.query(
      `SELECT c.*, b.price 
       FROM cart c 
       JOIN bouquets b ON c.bouquet_id = b.id 
       WHERE c.user_id = $1 AND c.bouquet_id = $2`,
      [userId, bouquetId]
    );

    if (existingItem.rows.length > 0) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –µ—Å–ª–∏ –±—É–∫–µ—Ç —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
      await pool.query(
        "UPDATE cart SET quantity = quantity + $1 WHERE user_id = $2 AND bouquet_id = $3",
        [quantity, userId, bouquetId]
      );
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –±—É–∫–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É
      await pool.query(
        "INSERT INTO cart (user_id, bouquet_id, quantity) VALUES ($1, $2, $3)",
        [userId, bouquetId, quantity]
      );
    }

    res.status(201).json({ message: "–ë—É–∫–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–µ—Ç–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
app.put("/api/cart/:cartItemId", authenticateToken, async (req, res) => {
  const { cartItemId } = req.params;
  const { quantity } = req.body;

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const cartItem = await pool.query(
      "SELECT * FROM cart WHERE id = $1",
      [cartItemId]
    );

    if (cartItem.rows.length === 0) {
      return res.status(404).json({ error: "–≠–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    if (cartItem.rows[0].user_id !== req.user.userId) {
      return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    await pool.query(
      "UPDATE cart SET quantity = $1 WHERE id = $2",
      [quantity, cartItemId]
    );

    res.json({ message: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –£–¥–∞–ª–∏—Ç—å –±—É–∫–µ—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
app.delete("/api/cart/:cartItemId", authenticateToken, async (req, res) => {
  const { cartItemId } = req.params;

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const cartItem = await pool.query(
      "SELECT * FROM cart WHERE id = $1",
      [cartItemId]
    );

    if (cartItem.rows.length === 0) {
      return res.status(404).json({ error: "–≠–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    if (cartItem.rows[0].user_id !== req.user.userId) {
      return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" });
    }

    // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç
    await pool.query("DELETE FROM cart WHERE id = $1", [cartItemId]);

    res.json({ message: "–ë—É–∫–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
app.post("/api/orders", authenticateToken, async (req, res) => {
  const { userId } = req.body;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ñ–æ—Ä–º–ª—è–µ—Ç —Å–≤–æ–π –∑–∞–∫–∞–∑
  if (parseInt(userId) !== req.user.userId) {
    return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" });
  }

  try {
    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await pool.query('BEGIN');

    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    const orderResult = await pool.query(
      "INSERT INTO orders (user_id, created_at) VALUES ($1, NOW()) RETURNING id",
      [userId]
    );
    const orderId = orderResult.rows[0].id;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const cartItems = await pool.query(
      "SELECT bouquet_id, quantity FROM cart WHERE user_id = $1",
      [userId]
    );

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑
    for (const item of cartItems.rows) {
      await pool.query(
        "INSERT INTO order_items (order_id, bouquet_id, quantity) VALUES ($1, $2, $3)",
        [orderId, item.bouquet_id, item.quantity]
      );
    }

    // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    await pool.query("DELETE FROM cart WHERE user_id = $1", [userId]);

    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await pool.query('COMMIT');

    res.status(201).json({
      message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω",
      orderId
    });
  } catch (error) {
    // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    await pool.query('ROLLBACK');
    console.error("–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get("/api/orders/:userId", authenticateToken, async (req, res) => {
  const { userId } = req.params;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã
  if (parseInt(userId) !== req.user.userId) {
    return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" });
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const orders = await pool.query(
      `SELECT o.id, o.created_at,
       (SELECT COUNT(*) FROM order_items WHERE order_id = o.id) as items_count,
       (SELECT SUM(oi.quantity * b.price) 
        FROM order_items oi 
        JOIN bouquets b ON oi.bouquet_id = b.id 
        WHERE oi.order_id = o.id) as total_price
       FROM orders o
       WHERE o.user_id = $1
       ORDER BY o.created_at DESC`,
      [userId]
    );

    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ (—Ç–æ–≤–∞—Ä—ã)
    for (const order of orders.rows) {
      const orderItems = await pool.query(
        `SELECT oi.quantity, b.id as bouquet_id, b.name, b.price
         FROM order_items oi
         JOIN bouquets b ON oi.bouquet_id = b.id
         WHERE oi.order_id = $1`,
        [order.id]
      );
      order.items = orderItems.rows;
    }

    res.json(orders.rows);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// API –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.post("/api/users/:userId/make-admin", authenticateToken, isAdmin, async (req, res) => {
  const { userId } = req.params;

  try {
    const user = await pool.query("SELECT * FROM users WHERE id = $1", [userId]);
    if (user.rows.length === 0) {
      return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    await pool.query("UPDATE users SET role = 'admin' WHERE id = $1", [userId]);

    res.json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±—É–∫–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.delete("/api/bouquets/:id", authenticateToken, isAdmin, async (req, res) => {
  const { id } = req.params;

  try {
    // –£–¥–∞–ª—è–µ–º —Ü–≤–µ—Ç—ã –∏–∑ –±—É–∫–µ—Ç–∞
    await pool.query(
      "DELETE FROM bouquet_flowers WHERE bouquet_id = $1",
      [id]
    );

    // –£–¥–∞–ª—è–µ–º –±—É–∫–µ—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await pool.query(
      "DELETE FROM cart WHERE bouquet_id = $1",
      [id]
    );

    // –£–¥–∞–ª—è–µ–º –±—É–∫–µ—Ç
    const result = await pool.query(
      "DELETE FROM bouquets WHERE id = $1 RETURNING *",
      [id]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: "–ë—É–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    res.json({ message: "–ë—É–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", deletedBouquet: result.rows[0] });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±—É–∫–µ—Ç–∞:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.get("/api/users", authenticateToken, isAdmin, async (req, res) => {
  try {
    const users = await pool.query(
      "SELECT id, username, role, created_at FROM users ORDER BY id"
    );
    res.json(users.rows);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
}); // ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ–º app.get

// üìå –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ (–≤–Ω–µ –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤)
app.listen(port, () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
});
